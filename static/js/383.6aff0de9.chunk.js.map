{"version":3,"file":"static/js/383.6aff0de9.chunk.js","mappings":"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","sources":["components/Сalendar/DayCalendarHead.styled.jsx","components/Сalendar/DayCalendarHead.jsx","components/TaskModal/utility/validateTaskForm.js","components/TaskModal/utility/autocompleteTaskForm.js","components/TaskModal/TaskForm.styled.jsx","components/TaskModal/TaskForm.jsx","components/TaskModal/TaskModal.jsx","components/Сalendar/AddTaskBtn.styled.jsx","components/Сalendar/AddTaskBtn.jsx","components/Сalendar/ColumnHeadBar.styled.jsx","components/Сalendar/ColumnHeadBar.jsx","components/Сalendar/ColumnTasksList.styled.jsx","components/Сalendar/ContextMenu.styled.jsx","components/Сalendar/ContextMenu.jsx","components/Сalendar/TaskToolbar.styled.jsx","components/Сalendar/TaskToolbar.jsx","components/Сalendar/TaskColumnCard.styled.jsx","components/Сalendar/TaskColumnCard.jsx","components/Сalendar/ColumnTasksList.jsx","components/Сalendar/TasksColumn.styled.jsx","components/Сalendar/TasksColumn.jsx","components/Сalendar/TaskColumnsList.styled.jsx","components/Сalendar/TaskColumnsList.jsx","pages/CalendarPage/ChoosedDay.jsx","redux/tasks/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\nimport * as Variables from '../../styles/variables';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const ListOfDays = styled.ul`\n  display: flex;\n  gap: 19px;\n  width: 100%;\n  margin-bottom: 14px;\n  padding: 14px 18px;\n  background-color: ${Variables.themeColors.secondBackground};\n  border: 1px solid ${Variables.themeColors.borderColor};\n  border-radius: 8px;\n  ${media.tablet} {\n    gap: 69px;\n    margin-bottom: 16px;\n    padding: 10px 32px;\n  }\n  ${media.desktop} {\n    max-width: 1087px;\n    gap: 128px;\n    padding: 10px 46px;\n  }\n`;\n\nexport const ListOfDaysItem = styled.li`\n  display: flex;\n  gap: 6px;\n  flex-direction: column;\n  align-items: center;\n  cursor: pointer;\n  ${media.tablet} {\n    gap: 4px;\n  }\n`;\n\nexport const Week = styled.p`\n  color: ${Variables.themeColors.label};\n  font-size: 16px;\n  font-family: ${Variables.fonts.primary};\n  font-weight: 600;\n  line-height: 1.13;\n  text-transform: uppercase;\n  ${media.tablet} {\n    font-size: 14px;\n    line-height: 1.29;\n  }\n`;\n\nexport const Day = styled.p`\n  padding: 4px 6px;\n  color: ${props => {\n    return props.isSameDay ? '#FFFFFF' : Variables.themeColors.main;\n  }};\n  background-color: ${props => {\n    return props.isSameDay ? '#3E85F3' : 'transparent';\n  }};\n\n  font-size: 12px;\n  font-family: ${Variables.fonts.primary};\n  font-weight: 700;\n  line-height: 1.17;\n  text-transform: uppercase;\n  border-radius: 6px;\n  ${media.tablet} {\n    padding: 4px 8px;\n    font-size: 16px;\n    line-height: 1.13;\n    border-radius: 8px;\n  }\n`;\n","import { format, isSameDay } from 'date-fns';\nimport { parse, startOfWeek, endOfWeek, eachDayOfInterval } from 'date-fns/esm';\nimport { useEffect, useState } from 'react';\nimport { useParams, redirect, useOutletContext } from 'react-router-dom';\nimport {\n  ListOfDays,\n  ListOfDaysItem,\n  Week,\n  Day,\n} from './DayCalendarHead.styled';\n\nexport const DayCalendarHead = () => {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const { currentDay } = useParams();\n  const { setCurrentDate } = useOutletContext();\n  const parsedCurrentDay = parse(currentDay, 'd-MMM-yyyy', new Date());\n\n  const days = eachDayOfInterval({\n    start: startOfWeek(parsedCurrentDay, { weekStartsOn: 1 }),\n    end: endOfWeek(parsedCurrentDay, { weekStartsOn: 1 }),\n  });\n  const handleClickRedirect = e => {\n    redirect(`../day/${e.currentTarget.dataset.date}`, {\n      replace: true,\n    });\n    setCurrentDate(\n      parse(e.currentTarget.dataset.date, 'd-MMMM-yyyy', new Date())\n    );\n  };\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [windowWidth]);\n\n  return (\n    <ListOfDays>\n      {days.map((day, index) => {\n        return (\n          <ListOfDaysItem\n            data-date={format(day, 'd-MMM-yyyy')}\n            onClick={handleClickRedirect}\n            key={format(day, 'd-MMM-yyyy')}\n          >\n            <Week>\n              {windowWidth < 768 ? format(day, 'EEEEE') : format(day, 'EEE')}\n            </Week>\n            <Day isSameDay={isSameDay(day, parsedCurrentDay)}>\n              {format(day, 'd')}\n            </Day>\n          </ListOfDaysItem>\n        );\n      })}\n    </ListOfDays>\n  );\n};\n","const checkFormat = str => {\n  const arr = str.split(':');\n  const res =\n    arr.length === 2 &&\n    arr[0].length === 2 &&\n    arr[1].length === 2 &&\n    !Number.isNaN(Number(arr[0])) &&\n    !Number.isNaN(Number(arr[1]));\n  return res;\n};\n\nconst endAfterStart = (start, end) => {\n  const startArr = start.split(':');\n  const startTime = Number(startArr[0]) * 60 + Number(startArr[1]);\n  const endArr = end.split(':');\n  const endTime = Number(endArr[0]) * 60 + Number(endArr[1]);\n  return endTime > startTime;\n};\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.title) {\n    errors.title = 'Required';\n  } else if (values.title.length > 250) {\n    errors.title = 'Must be 250 characters or less';\n  }\n\n  if (!values.start) {\n    errors.start = 'Required';\n  } else if (!checkFormat(values.start)) {\n    errors.start = 'XX:YY format only';\n  }\n\n  if (!values.end) {\n    errors.end = 'Required';\n  } else if (!checkFormat(values.end)) {\n    errors.end = 'XX:YY format only';\n  } else if (!endAfterStart(values.start, values.end)) {\n    errors.end = 'End must be after start';\n  }\n\n  if (\n    values.priority !== 'low' &&\n    values.priority !== 'medium' &&\n    values.priority !== 'high'\n  ) {\n    errors.priority = 'Wrong checkbox selected';\n  }\n\n  return errors;\n};\n\nexport { validate };\n\n// date: формат YYYY-MM-DD | обов'язково\n// category: [to-do | in-progress | done] | обов'язково\"\n// ймовірно це валідується в календарі\n","const autocomplete = value => {\n  let res = value;\n\n  if (value.length === 1) {\n    const num = Number(value);\n    if (!Number.isNaN(num)) {\n      if (num > 2) {\n        res = '0' + value + ':';\n      }\n    }\n  }\n\n  if (value.length === 2) {\n    const num = Number(value);\n    if (!Number.isNaN(num)) {\n      if (num > 24) {\n        res = '24:';\n      } else {\n        res = value + ':';\n      }\n    }\n  }\n\n  if (value.length === 4) {\n    const arr = value.split(':');\n    const num = Number(arr[1]);\n\n    if (!Number.isNaN(num)) {\n      if (num > 5) {\n        res = arr[0] + ':0' + arr[1];\n      }\n    }\n  }\n\n  if (value.length === 7) {\n    res = value.slice(0, 6);\n  }\n\n  return res;\n};\n\nexport { autocomplete };\n","import styled from 'styled-components';\nimport {\n  themeColors,\n  taskColors,\n  buttonColors,\n  animation,\n} from '../../styles/variables';\n\nconst Label = styled.label`\n  display: block;\n  width: 100%;\n\n  font-family: Inter;\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 14px;\n  letter-spacing: 0em;\n  color: ${themeColors.modalFormLabel};\n`;\n\nconst Input = styled.input`\n  display: block;\n  min-width: 10px;\n  width: 100%;\n\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-left: 14px;\n  padding-right: 14px;\n  background-color: ${themeColors.modalFormBg};\n  border: 1px solid ${themeColors.modalFormBorder};\n  border-radius: 8px;\n\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 18px;\n  letter-spacing: 0em;\n  color: ${themeColors.modalFormText};\n\n  outline: none;\n\n  margin-top: 8px;\n\n  @media screen and (min-width: 768px) {\n    padding-top: 14px;\n    padding-bottom: 14px;\n    padding-left: 18px;\n    padding-right: 18px;\n  }\n`;\n\nconst TimeContainer = styled.div`\n  display: flex;\n  gap: 15px;\n  max-width: 267px;\n\n  margin-top: 16px;\n  margin-bottom: 16px;\n\n  @media screen and (min-width: 375px) {\n    width: 267px;\n  }\n\n  @media screen and (min-width: 768px) {\n    gap: 14px;\n    width: 340px;\n    max-width: 340px;\n    margin-top: 18px;\n    margin-bottom: 28px;\n  }\n`;\n\nconst RadioContainer = styled.div`\n  display: flex;\n  gap: 16px;\n  padding-left: 3px;\n  margin-bottom: 32px;\n`;\n\nconst RadioButton = styled.input`\n  visibility: hidden;\n  opacity: 0;\n  position: absolute;\n\n  &:checked + label::before {\n    outline: 3px solid ${taskColors.priorityLow + '80'};\n  }\n\n  &:checked + label[for='medium']::before {\n    outline-color: ${taskColors.priorityMedium + '80'};\n  }\n\n  &:checked + label[for='high']::before {\n    outline-color: ${taskColors.priorityHigh + '80'};\n  }\n`;\n\nconst RadioLabel = styled.label`\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 18px;\n  letter-spacing: 0em;\n  color: #343434;\n  cursor: pointer;\n\n  &::before {\n    content: '';\n    display: inline-block;\n    width: 9px;\n    height: 9px;\n    border-radius: 50%;\n    background-color: ${taskColors.priorityLow};\n    border: 1px solid transparent;\n    margin-right: 5px;\n\n    @media screen and (min-width: 768px) {\n      width: 11px;\n      height: 11px;\n    }\n  }\n\n  &[for='medium']::before {\n    background-color: ${taskColors.priorityMedium};\n  }\n\n  &[for='high']::before {\n    background-color: ${taskColors.priorityHigh};\n  }\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  gap: 14px;\n`;\n\nconst buttonPlaceholder = `\n  width: 100%;\n  padding: 8px;\n  border-radius: 8px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 8px;\n\n  border: none;\n  outline: none;\n\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 18px;\n  letter-spacing: 0em;\n  text-align: center;\n\n  transition: background-color ${animation};\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    padding: 10px;\n  }\n`;\n\nconst Button = styled.button`\n  ${buttonPlaceholder}\n  color: ${buttonColors.white};\n  background-color: ${buttonColors.blue};\n\n  &:hover,\n  &:focus {\n    background-color: #2b78ef;\n  }\n`;\n\nconst LightButton = styled.button`\n  ${buttonPlaceholder}\n  color: #111111;\n  background-color: #efefef;\n\n  &:hover,\n  &:focus {\n    background-color: #e8e8e8;\n  }\n`;\n\nconst Err = styled.p`\n  font-family: Inter;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 18px;\n  letter-spacing: 0em;\n  color: red;\n`;\n\nconst Svg = styled.svg`\n  stroke: currentColor;\n  fill: ${buttonColors.white};\n`;\n\nexport {\n  Label,\n  Input,\n  TimeContainer,\n  RadioContainer,\n  RadioButton,\n  RadioLabel,\n  ButtonContainer,\n  Button,\n  LightButton,\n  Err,\n  Svg,\n};\n","import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\n\nimport { addTask, updateTask } from '../../redux/tasks/operations';\nimport { validate } from './utility/validateTaskForm';\nimport { autocomplete } from './utility/autocompleteTaskForm';\nimport sprite from 'images/svg/sprite.svg';\n\nimport {\n  Label,\n  Input,\n  TimeContainer,\n  RadioContainer,\n  RadioButton,\n  RadioLabel,\n  ButtonContainer,\n  Button,\n  LightButton,\n  Err,\n  Svg,\n} from './TaskForm.styled';\n\nconst TaskForm = ({ close, create, task }) => {\n  const dispatch = useDispatch();\n\n  const prevStartRef = useRef('');\n  const prevEndRef = useRef('');\n\n  // const date = task.date || '2023-06-23';\n  // const category = task.category || 'to-do';\n  // const id = task.id || '64956a30022ac250ec769b01';\n  const date = task.date;\n  const category = task.category;\n  const id = task._id;\n\n  const formik = useFormik({\n    initialValues: {\n      title: task.title || 'Enter text8',\n      start: task.start || '08:00',\n      end: task.end || '09:30',\n      priority: task.priority || 'low',\n    },\n    validate,\n    onSubmit: values => {\n      const newTask = { ...values, date, category };\n\n      if (create) {\n        addHandler(newTask);\n      } else {\n        editHandler(id, newTask);\n      }\n\n      close();\n    },\n  });\n\n  useEffect(() => {\n    let currentStart = formik.values.start;\n    if (currentStart.length > prevStartRef.current.length) {\n      currentStart = autocomplete(currentStart);\n      formik.values.start = currentStart;\n    }\n    prevStartRef.current = currentStart;\n\n    let currentEnd = formik.values.end;\n    if (currentEnd.length > prevEndRef.current.length) {\n      currentEnd = autocomplete(currentEnd);\n      formik.values.end = currentEnd;\n    }\n    prevEndRef.current = currentEnd;\n  });\n\n  const closeHandler = evt => {\n    close();\n  };\n\n  const addHandler = newTask => {\n    dispatch(addTask(newTask));\n  };\n\n  const editHandler = (taskId, newTask) => {\n    console.log(taskId, newTask);\n    dispatch(updateTask({ taskId, newTask }));\n  };\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <div role=\"group\">\n        <Label>\n          Title\n          <Input\n            id=\"title\"\n            name=\"title\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            value={formik.values.title}\n            placeholder=\"Enter text\"\n          />\n          {formik.errors.title && <Err>{formik.errors.title}</Err>}\n        </Label>\n        <TimeContainer>\n          <Label>\n            Start\n            <Input\n              id=\"start\"\n              name=\"start\"\n              type=\"text\"\n              onChange={formik.handleChange}\n              value={formik.values.start}\n              placeholder=\"XX:YY\"\n              autocomplete=\"off\"\n            />\n            {formik.errors.start && <Err>{formik.errors.start}</Err>}\n          </Label>\n          <Label>\n            End\n            <Input\n              id=\"end\"\n              name=\"end\"\n              type=\"text\"\n              onChange={formik.handleChange}\n              value={formik.values.end}\n              placeholder=\"XX:YY\"\n              autocomplete=\"off\"\n            />\n            {formik.errors.end && <Err>{formik.errors.end}</Err>}\n          </Label>\n        </TimeContainer>\n\n        <RadioContainer>\n          <RadioButton\n            id=\"low\"\n            name=\"priority\"\n            type=\"radio\"\n            onChange={formik.handleChange}\n            value=\"low\"\n            checked={formik.values.priority === 'low'}\n          />\n          <RadioLabel htmlFor=\"low\">Low</RadioLabel>\n          <RadioButton\n            id=\"medium\"\n            name=\"priority\"\n            type=\"radio\"\n            onChange={formik.handleChange}\n            value=\"medium\"\n            checked={formik.values.priority === 'medium'}\n          />\n          <RadioLabel htmlFor=\"medium\">Medium</RadioLabel>\n          <RadioButton\n            id=\"high\"\n            name=\"priority\"\n            type=\"radio\"\n            onChange={formik.handleChange}\n            value=\"high\"\n            checked={formik.values.priority === 'high'}\n          />\n          <RadioLabel htmlFor=\"high\">High</RadioLabel>\n        </RadioContainer>\n        {formik.errors.priority && <Err>{formik.errors.priority}</Err>}\n      </div>\n\n      {create ? (\n        <ButtonContainer>\n          <Button type=\"submit\">\n            <Svg width=\"20px\" height=\"20px\">\n              <use href={`${sprite}#plus`} />\n            </Svg>\n            Add\n          </Button>\n          <LightButton type=\"button\" onClick={closeHandler}>\n            Cansel\n          </LightButton>\n        </ButtonContainer>\n      ) : (\n        <Button type=\"submit\">\n          <Svg width=\"16px\" height=\"16px\">\n            <use href={`${sprite}#pencil`} />\n          </Svg>\n          Edit\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport { TaskForm };\n","import { createPortal } from 'react-dom';\n\nimport { Modal } from './Modal';\nimport { TaskForm } from './TaskForm';\n\nconst TaskModal = ({ close, create, task }) => {\n  return createPortal(\n    <Modal close={close}>\n      <TaskForm close={close} create={create} task={task} />\n    </Modal>,\n    document.body\n  );\n};\n\nexport default TaskModal;\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\nimport * as Variables from '../../styles/variables';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const Button = styled.button`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 0px;\n  border-radius: 8px;\n  border: 1px dashed ${Variables.buttonColors.blue};\n  background: ${Variables.themeColors.calendarBtnBackground};\n  cursor: pointer;\n  margin-top: 14px;\n  ${media.tablet} {\n    margin-top: 32px;\n  }\n`;\n\nexport const ButtonText = styled.p`\n  text-align: left;\n  color: ${Variables.themeColors.main};\n  font-size: 14px;\n  font-family: ${Variables.fonts.primary};\n  font-weight: 600;\n  line-height: 1.29;\n`;\n\nexport const Svg = styled.div`\n  height: 24px;\n  color: ${Variables.themeColors.main};\n`;\n","import { FiPlus } from 'react-icons/fi';\nimport { Button, ButtonText,Svg } from './AddTaskBtn.styled';\n\nexport const AddTaskBtn = ({ setIsAddModalOpen }) => {\n  return (\n    <Button onClick={() => setIsAddModalOpen(true)} type=\"button\">\n      <Svg>\n        <FiPlus size={24} />\n      </Svg>\n      <ButtonText>Add task</ButtonText>\n    </Button>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\nimport * as Variables from '../../styles/variables';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const ColumnHead = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n  ${media.tablet} {\n    margin-bottom: 28px;\n  }\n  ${media.desktop} {\n    margin-bottom: 35px;\n  }\n`;\n\nexport const Title = styled.h2`\n  padding: 7px 0;\n  color: ${Variables.themeColors.main};\n  text-align: center;\n  font-size: 18px;\n  font-family: ${Variables.fonts.primary};\n  font-weight: 700;\n  line-height: 1.11;\n\n  ${media.tablet} {\n    font-size: 20px;\n    line-height: 1.2;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  padding: 7px 0;\n  align-items: center;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  color: ${Variables.themeColors.main};\n  transition: color 250ms cubic-bezier(0.39, 0.575, 0.565, 1);\n  &:hover,\n  &:focus {\n    color: ${Variables.iconColors.blue};\n  }\n`;\n","import { isBefore, isSameDay, startOfToday } from 'date-fns';\nimport { FiPlusCircle } from 'react-icons/fi';\nimport { useParams } from 'react-router-dom';\nimport { ColumnHead, Title, Button } from './ColumnHeadBar.styled';\n\nexport const ColumnHeadBar = ({ setIsAddModalOpen, title }) => {\n  const { currentDay } = useParams();\n  return (\n    <ColumnHead>\n      <Title>{title}</Title>\n      {(isBefore(startOfToday(), new Date(currentDay)) ||\n        isSameDay(startOfToday(), new Date(currentDay))) && (\n        <Button onClick={() => setIsAddModalOpen(true)} type=\"button\">\n          <FiPlusCircle size={24} />\n        </Button>\n      )}\n    </ColumnHead>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const TasksList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  max-height: 372px;\n\n  gap: 14px;\n  padding: 0;\n  \n  ${media.desktop} {\n    gap: 18px;\n  }\n`;\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\nimport * as Variables from '../../styles/variables';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const Menu = styled.menu`\n  position: absolute;\n  top: -50px;\n  left: -152px;\n  margin: 0;\n  max-width: 147px;\n  padding: 14px;\n  border-radius: 8px;\n  background: ${Variables.themeColors.mainBackground};\n  box-shadow: 0px 4px 16px 0px rgba(17, 17, 17, 0.1);\n  border: 1px solid ${Variables.themeColors.borderColor};\n  ${media.tablet} {\n    padding: 20px 24px;\n  }\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 14px;\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: ${Variables.themeColors.main};\n  width: 100px;\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 1.17;\n  cursor: pointer;\n  ${media.tablet} {\n    font-size: 14px;\n    line-height: 1.29;\n  }\n`;\n\nexport const Svg = styled.svg`\n  stroke: ${Variables.themeColors.main};\n  fill: transparent;\n  width: 16px;\n  height: 16px;\n`;\n","import { useEffect } from 'react';\nimport { List, Menu, ListItem, Svg } from './ContextMenu.styled';\nimport sprite from '../../images/svg/sprite.svg';\nimport { useDispatch } from 'react-redux';\nimport { updateTask } from 'redux/tasks/operations';\n\nexport const ContextMenu = ({\n  contextMenuRef,\n  setIsContextMenu,\n  category,\n  task,\n}) => {\n  const dispatch = useDispatch();\n  const taskId = task._id;\n\n\n  const selectCategories = category => {\n    if (category === 'to-do') {\n      return [\n        { title: 'In progress', newCategory: 'in-progress' },\n        { title: 'Done', newCategory: 'done' },\n      ];\n    }\n    if (category === 'in-progress') {\n      return [\n        { title: 'To do', newCategory: 'to-do' },\n        { title: 'Done', newCategory: 'done' },\n      ];\n    }\n    if (category === 'done') {\n      return [\n        { title: 'To do', newCategory: 'to-do' },\n        { title: 'In progress', newCategory: 'in-progress' },\n      ];\n    }\n  };\n\nconst onMenuClick =  (newCategory) => {\nconst { title, start, end, priority, date} = task; \n\n  const updatedTask = {\n   title,\n    start,\n    end,\n    priority,\n    date,\n    category: newCategory,\n  };\n\ndispatch(updateTask({ taskId, newTask: updatedTask }));\nsetIsContextMenu(false);\n  \n};\n\n\n  useEffect(() => {\n    function handler(e) {\n      if (contextMenuRef.current) {\n        if (!contextMenuRef.current.contains(e.target)) {\n          setIsContextMenu(false);\n        }\n      }\n    }\n    document.addEventListener('click', handler);\n    return () => {\n      document.removeEventListener('click', handler);\n    };\n  }, [contextMenuRef, setIsContextMenu]);\n  return (\n    <Menu ref={contextMenuRef}>\n      <List>\n        {selectCategories(category).map(({ title, newCategory }) => {\n          \n          return (\n            <ListItem key={newCategory} onClick={()=>onMenuClick(newCategory)}>\n              <p>{title}</p>\n              <Svg>\n                <use href={sprite + '#arrow-circle'} />\n              </Svg>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Menu>\n  );\n};\n","import styled from 'styled-components';\nimport * as Variables from '../../styles/variables';\n\nexport const Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  gap: 10px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  background-color: transparent;\n  border: none;\n  padding: 0;\n  cursor: pointer;\n`;\n\nexport const Svg = styled.svg`\n  width: 16px;\n  height: 16px;\n  fill: transparent;\n  stroke: ${Variables.themeColors.main};\n  transition: stroke 250ms cubic-bezier(0.39, 0.575, 0.565, 1);\n  &:hover,\n  &:focus {\n    stroke: #3e85f3;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { ContextMenu } from './ContextMenu';\nimport { deleteTask } from '../../redux/tasks/operations';\nimport sprite from '../../images/svg/sprite.svg';\nimport { Wrapper, Button, Svg } from './TaskToolbar.styled';\nimport { useState } from 'react';\nimport { useRef } from 'react';\n\nexport const TaskToolbar = ({ setIsModalOpen, task, category }) => {\n  const dispatch = useDispatch();\n  const [isContextMenu, setIsContextMenu] = useState(false);\n  const contextMenuRef = useRef(null);\n  const handleClick = e => {\n    e.stopPropagation();\n    setIsContextMenu(prevState => !prevState);\n  };\n\n  return (\n    <Wrapper>\n      <Button onClick={handleClick} type=\"button\">\n        <Svg>\n          <use href={sprite + '#arrow-circle'} />\n        </Svg>\n      </Button>\n      <Button onClick={() => setIsModalOpen(true)} type=\"button\">\n        <Svg>\n          <use href={sprite + '#pencil'} />\n        </Svg>\n      </Button>\n      <Button onClick={() => dispatch(deleteTask(task._id))} type=\"button\">\n        <Svg>\n          <use href={sprite + '#trash'} />\n        </Svg>\n      </Button>\n      {isContextMenu && (\n        <ContextMenu\n          task={task}\n          category={category}\n          contextMenuRef={contextMenuRef}\n          setIsContextMenu={setIsContextMenu}\n        />\n      )}\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\nimport * as Variables from '../../styles/variables';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const TaskCard = styled.li`\n  width: 100%;\n  height: 108px;\n  padding: 15px;\n  background-color: ${Variables.themeColors.mainBackground};\n  border: 1px solid ${Variables.themeColors.borderColor};\n  border-radius: 8px;\n\n  ${media.tablet} {\n    height: 112px;\n  }\n`;\nexport const TaskTitle = styled.h3`\n  color: ${Variables.themeColors.main};\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.29;\n  margin-bottom: 28px;\n  ${media.tablet} {\n    margin-bottom: 32px;\n  }\n`;\n\nexport const Box = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: flex-end;\n`;\nexport const AvatarWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 32px;\n  height: 32px;\n  background-color: ${Variables.iconColors.blue};\n  border-radius: 32px;\n`;\nexport const Avatar = styled.img`\n  width: 28px;\n  height: 28px;\n  border-radius: 32px;\n`;\nexport const Level = styled.p`\n  display: inline-block;\n  height: 20px;\n  padding: 4px 12px;\n  border-radius: 4px;\n  text-transform: capitalize;\n  background-color: ${props => {\n    switch (props.priority) {\n      case 'low':\n        return Variables.taskColors.priorityLow;\n      case 'medium':\n        return Variables.taskColors.priorityMedium;\n      case 'high':\n        return Variables.taskColors.priorityHigh;\n      default:\n        return;\n    }\n  }};\n  color: ${Variables.fontColors.white};\n  font-size: 10px;\n  font-weight: 600;\n  line-height: 1.2;\n  text-align: justify;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectUser } from '../../redux/authorization/selectors';\nimport { TaskToolbar } from './TaskToolbar';\nimport TaskModal from '../TaskModal/TaskModal';\nimport {\n  TaskCard,\n  TaskTitle,\n  Box,\n  AvatarWrapper,\n  Avatar,\n  Level,\n  Wrapper,\n} from './TaskColumnCard.styled';\n\nimport { useState } from 'react';\n\nexport const TaskColumnCard = ({ task, category }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { avatarURL } = useSelector(selectUser);\n\n  const shortTitle = (title, maxLength) => {\n    if (title.length <= maxLength) {\n      return title;\n    }\n\n    return title.substring(0, maxLength) + '...';\n  };\n  return (\n    <TaskCard>\n      <TaskTitle>{shortTitle(task.title, 30)}</TaskTitle>\n      <Box>\n        <Wrapper>\n          <AvatarWrapper>\n            <Avatar src={avatarURL} alt=\"user avatar\" />\n          </AvatarWrapper>\n          <Level priority={task.priority}>{task.priority}</Level>\n        </Wrapper>\n        <TaskToolbar\n          category={category}\n          task={task}\n          setIsModalOpen={setIsModalOpen}\n        />\n      </Box>\n      {isModalOpen && (\n        <TaskModal\n          close={() => setIsModalOpen(false)}\n          create={false}\n          task={task}\n        />\n      )}\n    </TaskCard>\n  );\n};\n","import { TasksList } from './ColumnTasksList.styled';\nimport { TaskColumnCard } from './TaskColumnCard';\nimport { OverlayScrollbarsComponent } from 'overlayscrollbars-react';\nimport { useParams } from 'react-router-dom';\nimport { isSameDay } from 'date-fns';\nimport 'overlayscrollbars/overlayscrollbars.css';\nimport './Scrollbar.css';\n\n\nexport const ColumnTasksList = ({ tasks, category }) => {\n  const { currentDay } = useParams();\n \n\n  return (\n    <OverlayScrollbarsComponent\n      element=\"div\"\n      options={{\n        overflow: {\n          y: 'scroll',\n          x: 'hidden',\n        },\n      }}\n      defer\n    >\n      <TasksList>\n        {tasks.map(task => {\n          return isSameDay(new Date(currentDay), new Date(task.date)) ? (\n            <TaskColumnCard key={task._id} task={task} category={category} />\n          ) : (\n            false\n          );\n        })}\n      </TasksList>\n    </OverlayScrollbarsComponent>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\nimport * as Variables from '../../styles/variables';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const TaskColumn = styled.li`\n  flex: none;\n  width: 335px;\n  padding: 18px 18px 20px 18px;\n  border-radius: 8px;\n  background-color: ${Variables.themeColors.secondBackground};\n  border: 1px solid ${Variables.themeColors.borderColor};\n\n  ${media.tablet} {\n    width: 344px;\n    padding: 20px 20px 28px 20px;\n  }\n`;\n","import { format, isBefore, isSameDay, startOfToday } from 'date-fns';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport TaskModal from '../TaskModal/TaskModal';\nimport { AddTaskBtn } from './AddTaskBtn';\nimport { ColumnHeadBar } from './ColumnHeadBar';\nimport { ColumnTasksList } from './ColumnTasksList';\nimport { TaskColumn } from './TasksColumn.styled';\n\nexport const TasksColumn = ({ title, tasks, category }) => {\n  const { currentDay } = useParams();\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const date = format(new Date(currentDay), 'yyyy-MM-dd');\n  const newTask = {\n    date,\n    category,\n  };\n\n  return (\n    <TaskColumn key={title}>\n      <ColumnHeadBar setIsAddModalOpen={setIsAddModalOpen} title={title} />\n      <ColumnTasksList\n        tasks={tasks}\n        category={category}\n        isAddModalOpen={isAddModalOpen}\n        setIsAddModalOpen={setIsAddModalOpen}\n      />\n      {(isBefore(startOfToday(), new Date(currentDay)) ||\n        isSameDay(startOfToday(), new Date(currentDay))) && (\n        <AddTaskBtn setIsAddModalOpen={setIsAddModalOpen} />\n      )}\n      {isAddModalOpen && (\n        <TaskModal\n          close={() => setIsAddModalOpen(false)}\n          create={true}\n          task={newTask}\n        />\n      )}\n    </TaskColumn>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const ColumnsList = styled.ul`\n  display: flex;\n  align-items: flex-start;\n  margin: 0;\n  padding: 0;\n  ${media.tablet} {\n    gap: 16px;\n    ${media.desktop} {\n      gap: 27px;\n    }\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { OverlayScrollbarsComponent } from 'overlayscrollbars-react';\nimport { selectTasks } from '../../redux/tasks/selectors';\nimport { TasksColumn } from './TasksColumn';\nimport { ColumnsList } from './TaskColumnsList.styled';\nimport 'overlayscrollbars/overlayscrollbars.css';\nimport './Scrollbar.css';\n\nexport const TaskColumnsList = () => {\n  const tasks = useSelector(selectTasks);\n  const toDoTasks = tasks.filter(task => task.category === 'to-do');\n  const inProgressTasks = tasks.filter(task => task.category === 'in-progress');\n  const doneTasks = tasks.filter(task => task.category === 'done');\n  return (\n    <OverlayScrollbarsComponent\n      element=\"div\"\n      options={{\n        overflow: {\n          x: 'scroll',\n          y: 'hidden',\n        },\n      }}\n      defer\n    >\n      <ColumnsList>\n        <TasksColumn title={'To do'} tasks={toDoTasks} category={'to-do'} />\n        <TasksColumn\n          title={'In progress'}\n          tasks={inProgressTasks}\n          category={'in-progress'}\n        />\n        <TasksColumn title={'Done'} tasks={doneTasks} category={'done'} />\n      </ColumnsList>\n    </OverlayScrollbarsComponent>\n  );\n};\n","import { DayCalendarHead } from '../../components/Сalendar/DayCalendarHead';\nimport { TaskColumnsList } from '../../components/Сalendar/TaskColumnsList';\n\n\nconst ChoosedDay = () => {\n \n  return (\n    <div>\n      <DayCalendarHead />\n      <TaskColumnsList />\n    </div>\n  );\n};\n\nexport default ChoosedDay;\n","export const selectTasks = state => state.tasks.items;\n\nexport const selectIsLoading = state => state.tasks.isLoading;\n\nexport const selectError = state => state.tasks.error;\n"],"names":["media","tablet","concat","DEVICE_SIZE","desktop","ListOfDays","styled","ul","_templateObject","_taggedTemplateLiteral","Variables","secondBackground","borderColor","ListOfDaysItem","li","_templateObject2","Week","p","_templateObject3","label","primary","Day","_templateObject4","props","isSameDay","main","DayCalendarHead","_useState","useState","window","innerWidth","_useState2","_slicedToArray","windowWidth","setWindowWidth","currentDay","useParams","setCurrentDate","useOutletContext","parsedCurrentDay","parse","Date","days","eachDayOfInterval","start","startOfWeek","weekStartsOn","end","endOfWeek","handleClickRedirect","e","redirect","currentTarget","dataset","date","replace","useEffect","handleResize","addEventListener","removeEventListener","_jsx","children","map","day","index","_jsxs","format","onClick","checkFormat","str","arr","split","length","Number","isNaN","validate","values","errors","title","startArr","startTime","endArr","endAfterStart","priority","autocomplete","value","res","num","slice","Label","themeColors","modalFormLabel","Input","input","modalFormBg","modalFormBorder","modalFormText","TimeContainer","div","RadioContainer","RadioButton","_templateObject5","taskColors","priorityLow","priorityMedium","priorityHigh","RadioLabel","_templateObject6","ButtonContainer","_templateObject7","buttonPlaceholder","animation","Button","button","_templateObject8","buttonColors","white","blue","LightButton","_templateObject9","Err","_templateObject10","Svg","svg","_templateObject11","TaskForm","_ref","close","create","task","dispatch","useDispatch","prevStartRef","useRef","prevEndRef","category","id","_id","formik","useFormik","initialValues","onSubmit","newTask","_objectSpread","addHandler","editHandler","currentStart","current","currentEnd","addTask","taskId","console","log","updateTask","handleSubmit","role","name","type","onChange","handleChange","placeholder","checked","htmlFor","width","height","href","sprite","evt","createPortal","Modal","document","body","calendarBtnBackground","ButtonText","AddTaskBtn","setIsAddModalOpen","FiPlus","size","ColumnHead","Title","h2","ColumnHeadBar","isBefore","startOfToday","FiPlusCircle","TasksList","Menu","menu","mainBackground","List","ListItem","ContextMenu","contextMenuRef","setIsContextMenu","handler","contains","target","ref","newCategory","selectCategories","_ref2","updatedTask","onMenuClick","Wrapper","TaskToolbar","setIsModalOpen","isContextMenu","stopPropagation","prevState","deleteTask","TaskCard","TaskTitle","h3","Box","AvatarWrapper","Avatar","img","Level","TaskColumnCard","maxLength","isModalOpen","avatarURL","useSelector","selectUser","substring","src","alt","TaskModal","ColumnTasksList","tasks","OverlayScrollbarsComponent","element","options","overflow","y","x","defer","TaskColumn","TasksColumn","isAddModalOpen","ColumnsList","TaskColumnsList","selectTasks","toDoTasks","filter","inProgressTasks","doneTasks","state","items"],"sourceRoot":""}