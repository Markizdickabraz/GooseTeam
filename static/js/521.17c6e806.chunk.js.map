{"version":3,"file":"static/js/521.17c6e806.chunk.js","mappings":"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","sources":["../node_modules/date-fns/esm/add/index.js","../node_modules/date-fns/esm/sub/index.js","components/Сalendar/PeriodPaginator.jsx","components/Сalendar/PeriodTypeSelect.jsx","components/Сalendar/CalendarToolbar.jsx","../node_modules/date-fns/esm/startOfToday/index.js","pages/CalendarPage/CalendarPage.jsx","../node_modules/date-fns/esm/addDays/index.js","../node_modules/date-fns/esm/addMonths/index.js","../node_modules/date-fns/esm/subDays/index.js","../node_modules/date-fns/esm/subMonths/index.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;\n\n  // Add years and months\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date;\n\n  // Add weeks and days\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes and seconds\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport subDays from \"../subDays/index.js\";\nimport subMonths from \"../subMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name sub\n * @category Common Helpers\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @description\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be subtracted\n *\n * | Key     | Description                        |\n * |---------|------------------------------------|\n * | years   | Amount of years to be subtracted   |\n * | months  | Amount of months to be subtracted  |\n * | weeks   | Amount of weeks to be subtracted   |\n * | days    | Amount of days to be subtracted    |\n * | hours   | Amount of hours to be subtracted   |\n * | minutes | Amount of minutes to be subtracted |\n * | seconds | Amount of seconds to be subtracted |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract the following duration from 15 June 2017 15:29:20\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> Mon Sep 1 2014 10:19:50\n */\nexport default function sub(date, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;\n\n  // Subtract years and months\n  var dateWithoutMonths = subMonths(date, months + years * 12);\n\n  // Subtract weeks and days\n  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7);\n\n  // Subtract hours, minutes and seconds\n  var minutestoSub = minutes + hours * 60;\n  var secondstoSub = seconds + minutestoSub * 60;\n  var mstoSub = secondstoSub * 1000;\n  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);\n  return finalDate;\n}","export const PeriodPaginator = ({\n  currentDateMonth,\n  currentDateDay,\n  nextMonth,\n  prevMonth,\n  nextDay,\n  prevDay,\n  periodType,\n}) => {\n  const handleClickNext = () => {\n    if (periodType === 'month') {\n      return nextMonth;\n    }\n    return nextDay;\n  };\n  const handleClickPrev = () => {\n    if (periodType === 'month') {\n      return prevMonth;\n    }\n    return prevDay;\n  };\n\n  return (\n    <>\n      <p style={{ width: 120, marginRight: 20 }}>\n        {periodType === 'month' ? currentDateMonth : currentDateDay}\n      </p>\n      <div className=\"period-paginator\">\n        <button type=\"button\" onClick={handleClickPrev()}>{`<`}</button>\n        <button type=\"button\" onClick={handleClickNext()}>{`>`}</button>\n      </div>\n    </>\n  );\n};\n","\nexport const PeriodTypeSelect = ({ setPeriodType }) => {\n  return (\n    <div className=\"calendar-type-change\">\n      <button\n        type=\"button\"\n        value=\"month\"\n        onClick={() => setPeriodType('month')}\n      >\n        Month\n      </button>\n      <button type=\"button\" value=\"day\" onClick={() => setPeriodType('day')}>\n        Day\n      </button>\n    </div>\n  );\n};\n","import { format, add, sub } from 'date-fns';\nimport { PeriodPaginator } from './PeriodPaginator';\nimport { PeriodTypeSelect } from './PeriodTypeSelect';\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\n\nexport const CalendarToolbar = ({\n  periodType,\n  setPeriodType,\n  currentDate,\n  setCurrentDate,\n}) => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (periodType === 'month') {\n      return navigate(`${periodType}/${format(currentDate, 'd-MMM-yyyy')}`);\n    }\n    navigate(`${periodType}/${format(currentDate, 'd-MMM-yyyy')}`);\n  }, [periodType, currentDate, navigate]);\n\n  const nextMonth = () => {\n    const currentDateNextMonth = add(currentDate, { months: 1 });\n    setCurrentDate(currentDateNextMonth);\n  };\n  const prevMonth = () => {\n    const currentDatePrevMonth = sub(currentDate, { months: 1 });\n    setCurrentDate(currentDatePrevMonth);\n  };\n  const nextDay = () => {\n    const currentDateNextDay = add(currentDate, { days: 1 });\n    setCurrentDate(currentDateNextDay);\n  };\n  const prevDay = () => {\n    const currentDatePrevDay = sub(currentDate, { days: 1 });\n    setCurrentDate(currentDatePrevDay);\n  };\n  return (\n    <div className=\"calendar-toolbar\">\n      <PeriodPaginator\n        currentDateMonth={format(currentDate, 'MMMM yyyy')}\n        currentDateDay={format(currentDate, 'd MMM yyyy')}\n        nextMonth={nextMonth}\n        prevMonth={prevMonth}\n        nextDay={nextDay}\n        prevDay={prevDay}\n        periodType={periodType}\n      />\n      <PeriodTypeSelect setPeriodType={setPeriodType} />\n    </div>\n  );\n};\n","import startOfDay from \"../startOfDay/index.js\";\n/**\n * @name startOfToday\n * @category Day Helpers\n * @summary Return the start of today.\n * @pure false\n *\n * @description\n * Return the start of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @returns {Date} the start of today\n *\n * @example\n * // If today is 6 October 2014:\n * const result = startOfToday()\n * //=> Mon Oct 6 2014 00:00:00\n */\nexport default function startOfToday() {\n  return startOfDay(Date.now());\n}","import { CalendarToolbar } from 'components/Сalendar/CalendarToolbar';\nimport { Suspense, useState } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { startOfToday, format } from 'date-fns';\nimport { redirect } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport './calendar.css';\n\nconst CalendarPage = () => {\n  const [currentDate, setCurrentDate] = useState(startOfToday());\n  const [periodType, setPeriodType] = useState('month');\n\n  useEffect(() => {\n    redirect(`/calendar/month/${format(startOfToday(), 'd-MMM-yyyy')}`);\n  }, []);\n\n  return (\n    <div className=\"calendar\">\n      <CalendarToolbar\n        currentDate={currentDate}\n        setCurrentDate={setCurrentDate}\n        periodType={periodType}\n        setPeriodType={setPeriodType}\n      />\n      <Suspense fallback=\"Loading...\">\n        <Outlet context={{ setPeriodType, setCurrentDate }} />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default CalendarPage;\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  var dayOfMonth = date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}"],"names":["add","dirtyDate","duration","requiredArgs","arguments","_typeof","Date","NaN","years","toInteger","months","weeks","days","hours","minutes","seconds","date","toDate","dateWithMonths","addMonths","dateWithDays","addDays","msToAdd","getTime","sub","dateWithoutMonths","subMonths","dateWithoutDays","subDays","mstoSub","PeriodPaginator","_ref","currentDateMonth","currentDateDay","nextMonth","prevMonth","nextDay","prevDay","periodType","_jsxs","_Fragment","children","_jsx","style","width","marginRight","className","type","onClick","PeriodTypeSelect","setPeriodType","value","CalendarToolbar","currentDate","setCurrentDate","navigate","useNavigate","useEffect","concat","format","currentDateNextMonth","currentDatePrevMonth","currentDateNextDay","currentDatePrevDay","startOfToday","startOfDay","now","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","redirect","Suspense","fallback","Outlet","context","dirtyAmount","amount","isNaN","setDate","getDate","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","setFullYear","getFullYear"],"sourceRoot":""}