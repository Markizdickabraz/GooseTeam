{"version":3,"file":"static/js/632.7223e491.chunk.js","mappings":"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","sources":["components/Сalendar/DayCalendarHead.styled.jsx","components/Сalendar/DayCalendarHead.jsx","components/Сalendar/AddTaskBtn.styled.jsx","components/Сalendar/AddTaskBtn.jsx","components/Сalendar/ColumnHeadBar.styled.jsx","components/Сalendar/ColumnHeadBar.jsx","components/Сalendar/ColumnTasksList.styled.jsx","components/Сalendar/TaskToolbar.styled.jsx","components/Сalendar/TaskToolbar.jsx","components/Сalendar/TaskColumnCard.styled.jsx","components/Сalendar/TaskColumnCard.jsx","components/Сalendar/ColumnTasksList.jsx","components/Сalendar/TasksColumn.styled.jsx","components/Сalendar/TasksColumn.jsx","components/Сalendar/TaskColumnsList.styled.jsx","components/Сalendar/TaskColumnsList.jsx","pages/CalendarPage/ChoosedDay.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\nimport * as Variables from '../../styles/variables';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const ListOfDays = styled.ul`\n  display: flex;\n  gap: 19px;\n  width: 100%;\n  margin-bottom: 14px;\n  padding: 14px 18px;\n\n  ${media.tablet} {\n    gap: 69px;\n    margin-bottom: 16px;\n    padding: 10px 32px;\n  }\n  ${media.desktop} {\n    max-width: 1087px;\n    gap: 128px;\n    padding: 10px 46px;\n  }\n`;\n\nexport const ListOfDaysItem = styled.li`\n  display: flex;\n  gap: 6px;\n  flex-direction: column;\n  align-items: center;\n  cursor: pointer;\n  ${media.tablet} {\n    gap: 4px;\n  }\n`;\n\nexport const Week = styled.p`\n  color: ${Variables.fontColors.black};\n  font-size: 16px;\n  font-family: ${Variables.fonts.primary};\n  font-weight: 600;\n  line-height: 1.13;\n  text-transform: uppercase;\n  ${media.tablet} {\n    font-size: 14px;\n    line-height: 1.29;\n  }\n`;\n\nexport const Day = styled.p`\n  padding: 4px 6px;\n  color: ${Variables.fontColors.black};\n  font-size: 12px;\n  font-family: ${Variables.fonts.primary};\n  font-weight: 700;\n  line-height: 1.17;\n  text-transform: uppercase;\n  border-radius: 6px;\n  ${media.tablet} {\n    padding: 4px 8px;\n    font-size: 16px;\n    line-height: 1.13;\n    border-radius: 8px;\n  }\n`;\n","import { format, isSameDay } from 'date-fns';\nimport { parse, startOfWeek, endOfWeek, eachDayOfInterval } from 'date-fns/esm';\nimport { useEffect, useState } from 'react';\nimport { useParams, redirect, useOutletContext } from 'react-router-dom';\nimport {\n  ListOfDays,\n  ListOfDaysItem,\n  Week,\n  Day,\n} from './DayCalendarHead.styled';\n\nexport const DayCalendarHead = () => {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const { currentDay } = useParams();\n  const { setCurrentDate } = useOutletContext();\n  const parsedCurrentDay = parse(currentDay, 'd-MMM-yyyy', new Date());\n\n  const days = eachDayOfInterval({\n    start: startOfWeek(parsedCurrentDay, { weekStartsOn: 1 }),\n    end: endOfWeek(parsedCurrentDay, { weekStartsOn: 1 }),\n  });\n  const handleClickRedirect = e => {\n    redirect(`../day/${e.currentTarget.dataset.date}`, {\n      replace: true,\n    });\n    setCurrentDate(\n      parse(e.currentTarget.dataset.date, 'd-MMMM-yyyy', new Date())\n    );\n  };\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [windowWidth]);\n\n  return (\n    <ListOfDays>\n      {days.map((day, index) => {\n        return (\n          <ListOfDaysItem\n            data-date={format(day, 'd-MMM-yyyy')}\n            onClick={handleClickRedirect}\n            key={format(day, 'd-MMM-yyyy')}\n          >\n            <Week>\n              {windowWidth < 768 ? format(day, 'EEEEE') : format(day, 'EEE')}\n            </Week>\n            <Day\n              style={{\n                color: isSameDay(day, parsedCurrentDay) ? '#FFFFFF' : '#343434',\n                backgroundColor: isSameDay(day, parsedCurrentDay)\n                  ? '#3E85F3'\n                  : '#FFFFFF',\n              }}\n            >\n              {format(day, 'd')}\n            </Day>\n          </ListOfDaysItem>\n        );\n      })}\n    </ListOfDays>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\nimport * as Variables from '../../styles/variables';\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const Button = styled.button`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 8px;\n  padding: 12px 0px;\n  border-radius: 8px;\n  border: 1px dashed ${Variables.buttonColors.blue};\n  background: ${Variables.buttonColors.lightBlue};\n  cursor: pointer;\n  margin-top: 14px;\n  ${media.tablet} {\n    margin-top: 32px;\n  }\n`;\n\nexport const ButtonText = styled.p`\n  text-align: left;\n  color: ${Variables.fontColors.black};\n  font-size: 14px;\n  font-family: ${Variables.fonts.primary};\n  font-weight: 600;\n  line-height: 1.29;\n`;\n","import { FiPlus } from 'react-icons/fi';\nimport { Button, ButtonText } from './AddTaskBtn.styled';\n\nexport const AddTaskBtn = () => {\n  return (\n    <Button type=\"button\">\n      <div style={{ height: 24 }}>\n        <FiPlus size={24} />\n      </div>\n      <ButtonText>Add task</ButtonText>\n    </Button>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\nimport * as Variables from '../../styles/variables';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const ColumnHead = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n  ${media.tablet} {\n    margin-bottom: 28px;\n  }\n`;\n\nexport const Title = styled.h2`\n  padding: 7px 0;\n  color: ${Variables.fontColors.black};\n  text-align: center;\n  font-size: 18px;\n  font-family: ${Variables.fonts.primary};\n  font-weight: 700;\n  line-height: 1.11;\n\n  ${media.tablet} {\n    font-size: 20px;\n    line-height: 1.2;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  padding: 7px 0;\n  align-items: center;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n`;\n","import { FiPlusCircle } from 'react-icons/fi';\nimport { ColumnHead, Title, Button } from './ColumnHeadBar.styled';\n\nexport const ColumnHeadBar = ({ title }) => {\n  return (\n    <ColumnHead>\n      <Title>{title}</Title>\n      <Button type=\"button\">\n        <FiPlusCircle size={24} />\n      </Button>\n    </ColumnHead>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const TasksList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n  max-height: 372px;\n  padding: 0;\n  ${media.desktop} {\n    gap: 18px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  gap: 10px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  background-color: transparent;\n  border: none;\n  padding: 0;\n`;\n\nexport const Svg = styled.svg`\n  stroke: #212121;\n  fill: transparent;\n  width: 16px;\n  height: 16px;\n  cursor: pointer;\n  transition: stroke 0.5s cubic-bezier(0.39, 0.575, 0.565, 1);\n  &:hover,\n  &:focus {\n    stroke: #3e85f3;\n  }\n`;\n","import sprite from '../../images/svg/sprite.svg';\nimport { Wrapper, Button, Svg } from './TaskToolbar.styled';\n\nexport const TaskToolbar = () => {\n  return (\n    <Wrapper>\n      <Button type=\"button\">\n        <Svg>\n          <use href={sprite + '#arrow-circle'} />\n        </Svg>\n      </Button>\n      <Button type=\"button\">\n        <Svg>\n          <use href={sprite + '#pencil'} />\n        </Svg>\n      </Button>\n      <Button type=\"button\">\n        <Svg>\n          <use href={sprite + '#trash'} />\n        </Svg>\n      </Button>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\nimport * as Variables from '../../styles/variables';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const TaskCard = styled.li`\n  width: 100%;\n  height: 108px;\n  padding: 15px;\n  background-color: #f7f6f9;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  border-radius: 8px;\n\n  ${media.tablet} {\n    height: 112px;\n  }\n`;\nexport const TaskTitle = styled.h3`\n  color: ${Variables.fontColors.black};\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.29;\n  margin-bottom: 28px;\n  ${media.tablet} {\n    margin-bottom: 32px;\n  }\n`;\n\nexport const Box = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: flex-end;\n`;\nexport const Avatar = styled.div`\n  width: 32px;\n  height: 32px;\n  background-color: #3e85f3;\n  border-radius: 32px;\n`;\nexport const Level = styled.p`\n  display: inline-block;\n  height: 20px;\n  padding: 4px 12px;\n  border-radius: 4px;\n  background-color: #000000;\n  color: ${Variables.fontColors.white};\n  font-size: 10px;\n  font-weight: 600;\n  line-height: 1.2;\n  text-align: justify;\n`;\n","import { TaskToolbar } from './TaskToolbar';\nimport {\n  TaskCard,\n  TaskTitle,\n  Box,\n  Avatar,\n  Level,\n  Wrapper,\n} from './TaskColumnCard.styled';\n\nexport const TaskColumnCard = () => {\n  return (\n    <TaskCard>\n      <TaskTitle>Картка завдання</TaskTitle>\n      <Box>\n        <Wrapper>\n          <Avatar></Avatar>\n          <Level>Level</Level>\n        </Wrapper>\n        <TaskToolbar />\n      </Box>\n    </TaskCard>\n  );\n};\n","import { TasksList } from './ColumnTasksList.styled';\nimport { TaskColumnCard } from './TaskColumnCard';\nimport { OverlayScrollbarsComponent } from 'overlayscrollbars-react';\nimport 'overlayscrollbars/overlayscrollbars.css';\nimport './Scrollbar.css';\n\nexport const ColumnTasksList = () => {\n  return (\n    <OverlayScrollbarsComponent\n      element=\"div\"\n      options={{\n        overflow: {\n          y: 'scroll',\n          x: 'hidden',\n        },\n      }}\n      defer\n    >\n      <TasksList>\n        <TaskColumnCard />\n        <TaskColumnCard />\n        <TaskColumnCard />\n        <TaskColumnCard />\n        <TaskColumnCard />\n        <TaskColumnCard />\n        <TaskColumnCard />\n        <TaskColumnCard />\n        <TaskColumnCard />\n      </TasksList>\n    </OverlayScrollbarsComponent>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const TaskColumn = styled.div`\n  flex: none;\n  width: 335px;\n  padding: 18px 18px 20px 18px;\n  border-radius: 8px;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n\n  ${media.tablet} {\n    width: 344px;\n    padding: 20px 20px 28px 20px;\n  }\n`;\n","import { AddTaskBtn } from './AddTaskBtn';\nimport { ColumnHeadBar } from './ColumnHeadBar';\nimport { ColumnTasksList } from './ColumnTasksList';\nimport { TaskColumn } from './TasksColumn.styled';\n\nexport const TasksColumn = ({ title, todos }) => {\n  return (\n    <TaskColumn>\n      <ColumnHeadBar title={title} />\n      <ColumnTasksList />\n      <AddTaskBtn />\n    </TaskColumn>\n  );\n};\n","import styled from 'styled-components';\nimport { DEVICE_SIZE } from '../../styles/deviceWidth';\n\nconst media = {\n  tablet: `@media screen and (min-width: ${DEVICE_SIZE.tablet})`,\n  desktop: `@media screen and (min-width: ${DEVICE_SIZE.desktop})`,\n};\n\nexport const ColumnsList = styled.div`\n  display: flex;\n  align-items: center;\n\n  ${media.tablet} {\n    gap: 16px;\n    ${media.desktop} {\n      gap: 27px;\n    }\n  }\n`;\n","import { TasksColumn } from './TasksColumn';\nimport { ColumnsList } from './TaskColumnsList.styled';\nimport { OverlayScrollbarsComponent } from 'overlayscrollbars-react';\nimport 'overlayscrollbars/overlayscrollbars.css';\nimport './Scrollbar.css';\n\nexport const TaskColumnsList = () => {\n  return (\n    <OverlayScrollbarsComponent\n      element=\"div\"\n      options={{\n        overflow: {\n          x: 'scroll',\n          y: 'hidden',\n        },\n      }}\n      defer\n    >\n      <ColumnsList>\n        <TasksColumn title={'To do'} />\n        <TasksColumn title={'In progress'} />\n        <TasksColumn title={'Done'} />\n      </ColumnsList>\n    </OverlayScrollbarsComponent>\n  );\n};\n","import { DayCalendarHead } from '../../components/Сalendar/DayCalendarHead';\nimport { TaskColumnsList } from '../../components/Сalendar/TaskColumnsList';\n\n\nconst ChoosedDay = () => {\n  return (\n    <div>\n      <DayCalendarHead />\n      <TaskColumnsList />\n    </div>\n  );\n};\n\nexport default ChoosedDay;\n"],"names":["media","tablet","concat","DEVICE_SIZE","desktop","ListOfDays","styled","ul","_templateObject","_taggedTemplateLiteral","ListOfDaysItem","li","_templateObject2","Week","p","_templateObject3","Variables","black","primary","Day","_templateObject4","DayCalendarHead","_useState","useState","window","innerWidth","_useState2","_slicedToArray","windowWidth","setWindowWidth","currentDay","useParams","setCurrentDate","useOutletContext","parsedCurrentDay","parse","Date","days","eachDayOfInterval","start","startOfWeek","weekStartsOn","end","endOfWeek","handleClickRedirect","e","redirect","currentTarget","dataset","date","replace","useEffect","handleResize","addEventListener","removeEventListener","_jsx","children","map","day","index","_jsxs","format","onClick","style","color","isSameDay","backgroundColor","Button","button","blue","lightBlue","ButtonText","AddTaskBtn","type","height","FiPlus","size","ColumnHead","div","Title","h2","ColumnHeadBar","_ref","title","FiPlusCircle","TasksList","Wrapper","Svg","svg","TaskToolbar","href","sprite","TaskCard","TaskTitle","h3","Box","Avatar","_templateObject5","Level","_templateObject6","white","TaskColumnCard","ColumnTasksList","OverlayScrollbarsComponent","element","options","overflow","y","x","defer","TaskColumn","TasksColumn","todos","ColumnsList","TaskColumnsList"],"sourceRoot":""}